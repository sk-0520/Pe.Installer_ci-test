name: Release Build

on: push

env:
  SOLUTION_PATH: Source\Pe.Installer.sln
  OUTPUT_PATH: Source/Pe.Installer/bin/x86/Release/Pe.Installer.exe
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:

  build:

    runs-on: windows-2022

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v4

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: <Restore> Application
        shell: cmd
        run: |
          nuget restore ${{ env.SOLUTION_PATH }}

      - name: <Build> Application
        shell: cmd
        run: |
          msbuild ${{ env.SOLUTION_PATH }} /t:Build /p:Configuration=Release
          tree

      - name: <Artifact> Application
        uses: actions/upload-artifact@v4
        with:
          name: Pe.Installer
          path: ${{ env.OUTPUT_PATH }}

  deploy:

    needs: build

    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci-test'

    runs-on: windows-2022

    steps:
      - name: <Download> Application
        uses: actions/download-artifact@v4
        with:
          name: Pe.Installer
          path: Pe.Installer

      - name: <Read> Version
        id: version
        shell: pwsh
        run: |
          $version = (Get-Item Pe.Installer\Pe.Installer.exe).VersionInfo.FileVersion
          Write-Output "dot=$version" > $env:GITHUB_OUTPUT

      - name: <Delete> TEST Tag
        if: github.ref != 'refs/heads/master'
        continue-on-error: true
        uses: ClementTsang/delete-tag-and-release@v0.4.0
        with:
          delete_release: true
          tag_name: ${{ steps.version.outputs.dot }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: <Create> Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const releaseResult = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              generate_release_notes: true,
              name: '${{ steps.version.outputs.dot }}',
              tag_name: '${{ steps.version.outputs.dot }}',
            });
            return releaseResult['data']['id'];

      - name: <Upload> Application
        shell: pwsh
        run: |
          $headers = @{
            'Accept' = 'application/vnd.github+json'
            'Authorization' = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            'X-GitHub-Api-Version' = '2022-11-28'
          }
          $uri = [uri]"https://uploads.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/${{ steps.create-release.outputs.result }}/assets?name=Pe.Installer.exe"

          Invoke-WebRequest `
            -Uri $uri `
            -Method Post `
            -Headers $headers `
            -ContentType 'application/octet-stream' `
            -InFile 'Pe.Installer/Pe.Installer.exe'
